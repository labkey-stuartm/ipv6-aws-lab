provider "aws" {
  region  = "${var.region}"
  profile = "${var.aws_profile_name}"
}

# Import the VPC resources
data "terraform_remote_state" "vpc" {
  backend = "local"

  config = {
    path = "../01_vpc/terraform.tfstate"
  }
}

data "aws_ami" "ubuntu" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["099720109477"] # Canonical
}

resource "aws_security_group" "v6LabDockerSG" {
  description = "Allow SSH/HTTP(S)/ICMP inbound traffic"
  vpc_id      = data.terraform_remote_state.vpc.outputs.vpc_id

  ingress {
    description      = "SSH from anywhere"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  ingress {
    description      = "HTTP from anywhere"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  ingress {
    description      = "HTTPS from anywhere"
    from_port        = 443
    to_port          = 443
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  ingress {
    description      = "ICMPv4 from anywhere"
    from_port        = -1
    to_port          = -1
    protocol         = "icmp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  ingress {
    description      = "ICMPv6 from anywhere"
    from_port        = -1
    to_port          = -1
    protocol         = "icmpv6"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name        = "v6LabDockerSG"
    Environment = "v6Lab"

  }
}

# Due to the limitation of the AWS API, we cannot configure a static IPv6 address AND add an autogenerated
# delegated prefix at the same time. We will therefore configure a specific subnet (below) and add a post-boot
# hook to configure an IP from that prefix.
#
# We take the /80 instance prefix and build a /96 of it as follows:
# - Take the /80 assigned to the ENI, e.g. 2001:db8:dead:beef:4000::/80
# - Place "1" (0x0001) into bits 81..96
# - Set the netmask to /96 (80+16)
# - Use the resulting prefix (2001:db8:dead:beef:4000:1::/96) for primary docker network
# We also use the /80 instance prefix and build the instance IPv6 address as follows:
# - Take the /80 assigned to the ENI, e.g. 2001:db8:dead:beef:4000::/80
# - Place "1" into bits 97..128 (we have plenty of space here, but just use "1")
# - Set the netmask to /128, equivalent to the DHCPv6 assigned address mask
# - Use the resulting address on the primary network interface in the system
data "template_file" "init" {
  template = file("setup-system.cloud-init")

  vars = {
    docker_prefix = cidrsubnet(one(aws_network_interface.eni_v6LabDockerEC2.ipv6_prefixes[*]),
      16,
      1)
    system_ipv6_address = cidrhost(one(aws_network_interface.eni_v6LabDockerEC2.ipv6_prefixes[*]), 1)
  }
}

# EC2 in a dual-stack public subnet
# Retrieve assigned prefixes using e.g.
# curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/06:07:eb:4d:93:9e/ipv6-prefix
# 2a05:d01c:ebc:6400:bad5:0:0:0/80
resource "aws_network_interface" "eni_v6LabDockerEC2" {
  subnet_id       = data.terraform_remote_state.vpc.outputs.public_subnets[0].id
  security_groups = [aws_security_group.v6LabDockerSG.id]
  # This will assign a /80 prefix to the instance. The instance will have a globally routable IPv6
  # address for itself (thanks to the subnet settings) AND another /80 prefix for sub-delegation (e.g. to containers)
  # The prefix is constructed as follows:
  # - Take the /64 subnet prefix, e.g. 2001:db8:dead:beef::/64
  # - Place "16384" (0x4000) into bits 65..80
  # - Set the netmask to /80 (64+16; /80 is the AWS IPv6 delegated prefix mask)
  # - Route the resulting prefix (2001:db8:dead:beef:4000::/80) to the instance
  ipv6_prefixes = [
    cidrsubnet(data.terraform_remote_state.vpc.outputs.public_subnets[0].ipv6_cidr_block,
      16,
      16384)
  ]

  tags = {
    Name        = "eni_v6LabDockerEC2"
    Environment = "v6Lab"
  }
}

resource "aws_instance" "v6LabDockerEC2" {
  ami           = data.aws_ami.ubuntu.id
  instance_type = "t3.micro"
  key_name      = var.ssh_key_name


  network_interface {
    network_interface_id = aws_network_interface.eni_v6LabDockerEC2.id
    device_index         = 0
  }

  credit_specification {
    cpu_credits = "standard"
  }

  tags = {
    Name        = "v6LabDockerEC2"
    Environment = "v6Lab"
  }

  user_data = data.template_file.init.rendered
}
